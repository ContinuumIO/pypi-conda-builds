package:
  name: ckan-api-client
  version: "0.1-beta5"

source:
  fn: ckan-api-client-0.1-beta5.tar.gz
  url: https://pypi.python.org/packages/source/c/ckan-api-client/ckan-api-client-0.1-beta5.tar.gz
  md5: c09e4149883b724a7297e3d0cab28094
#  patches:
   # List any patch files here
   # - fix.patch

build:
  preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - ckan-api-client = ckan-api-client:main
    #
    # Would create an entry point called ckan-api-client that calls ckan-api-client.main()

    - ckanclient = ckan_api_client.cli:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - requests
    - cliff

  run:
    - python
    - setuptools
    - requests
    - cliff

test:
  # Python imports
  imports:
    - ckan_api_client
    - ckan_api_client.commands
    - ckan_api_client.objects
    - ckan_api_client.tests
    - ckan_api_client.tests.functional
    - ckan_api_client.tests.functional.ckan_api
    - ckan_api_client.tests.functional.client_hilev
    - ckan_api_client.tests.functional.client_lowlev
    - ckan_api_client.tests.functional.client_lowlev.utils
    - ckan_api_client.tests.functional.client_sync
    - ckan_api_client.tests.unit
    - ckan_api_client.tests.utils

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - ckanclient --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://rshk.github.io/ckan-api-client
  license: BSD License
  summary: 'Client for the Ckan API'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
