package:
  name: infi.jira_cli
  version: "0.3"

source:
  fn: infi.jira_cli-0.3.tar.gz
  url: https://pypi.python.org/packages/source/i/infi.jira_cli/infi.jira_cli-0.3.tar.gz
  md5: 1acc27b59afab8ccd4a9aa890caa31d9
#  patches:
   # List any patch files here
   # - fix.patch

build:
  preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - infi.jira_cli = infi.jira_cli:main
    #
    # Would create an entry point called infi.jira_cli that calls infi.jira_cli.main()

    - jirelease = infi.jira_cli.jirelease:main
    - jirelnotes = infi.jira_cli.jirelnotes:main
    - jish = infi.jira_cli.jish:main
    - jissue = infi.jira_cli.jissue:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - docopt
    - git-py
    - infi.docopt-completion
    - infi.execute
    - infi.pyutils
    - jinja2
    - jira
    - munch
    - prettytable
    - schematics
    - setuptools

  run:
    - python
    - docopt
    - git-py
    - infi.docopt-completion
    - infi.execute
    - infi.pyutils
    - jinja2
    - jira
    - munch
    - prettytable
    - schematics
    - setuptools

test:
  # Python imports
  imports:
    - infi
    - infi.jira_cli

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - jirelease --help
    - jirelnotes --help
    - jish --help
    - jissue --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/Infinidat/infi.jira_cli
  license: Python Software Foundation License
  summary: 'JIRA command-line tools'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
