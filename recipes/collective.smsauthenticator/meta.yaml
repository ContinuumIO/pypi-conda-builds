package:
  name: collective.smsauthenticator
  version: "0.3.1"

source:
  fn: collective.smsauthenticator-0.3.1.tar.gz
  url: https://pypi.python.org/packages/source/c/collective.smsauthenticator/collective.smsauthenticator-0.3.1.tar.gz
  md5: b04bda0caa7a9c78d59fa5a6a5ee3b03
#  patches:
   # List any patch files here
   # - fix.patch

build:
  preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - collective.smsauthenticator = collective.smsauthenticator:main
    #
    # Would create an entry point called collective.smsauthenticator that calls collective.smsauthenticator.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - setuptools
    - plone.api >=1.1.0
    - plone.directives.form >=1.1
    - ska >=1.4.2
    - rebus >=0.2
    - twilio >=3.6.0

  run:
    - python
    - setuptools
    - setuptools
    - plone.api >=1.1.0
    - plone.directives.form >=1.1
    - ska >=1.4.2
    - rebus >=0.2
    - twilio >=3.6.0

test:
  # Python imports
  imports:
    - collective
    - collective.smsauthenticator
    - collective.smsauthenticator.Extensions
    - collective.smsauthenticator.browser
    - collective.smsauthenticator.browser.forms
    - collective.smsauthenticator.tests

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/collective/collective.smsauthenticator
  license: GPL 2.0
  summary: 'Two-step verification in Plone 4 using login codes sent by SMS.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
