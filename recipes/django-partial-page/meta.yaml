package:
  name: django-partial-page
  version: "0.4.1"

source:
  fn: django-partial-page-0.4.1.tar.gz
  url: https://pypi.python.org/packages/source/d/django-partial-page/django-partial-page-0.4.1.tar.gz
  md5: 5e893b74375b087f970f6342fbfa00ed
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - django-partial-page = django-partial-page:main
    #
    # Would create an entry point called django-partial-page that calls django-partial-page.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools

  run:
    - python

test:
  # Python imports
  imports:
    - django_partial_page
    - django_partial_page.templatetags

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://bitbucket.org/siberiano/django-partial-page/
  license: Public Domain
  summary: 'Middleware that extracts {% block-s %} from pages and sends them as JSON. This allows the clients update parts of the pages, which is useful for Ajax apps and sites using History.PushState.\n    \n    If /mypage/ has {% block main_content %} in the template, make a request /mypage/?partial=main_content, and you\'ll receive a JSON: {"main_content": "..."}.\n    \n    The example Django project in the BitBucket contains a working JavaScript module that handles these requests and does something more.\n    '

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
