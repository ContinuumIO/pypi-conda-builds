package:
  name: assemblycoins
  version: "0.1.2"

source:
  fn: assemblycoins-0.1.2.tar.gz
  url: https://pypi.python.org/packages/source/a/assemblycoins/assemblycoins-0.1.2.tar.gz
  md5: 40b1eaa3a517c0cd83f5e02f75b3ece6
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - assemblycoins = assemblycoins:main
    #
    # Would create an entry point called assemblycoins that calls assemblycoins.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - flask
    - flask-sqlalchemy
    - markupsafe
    - sqlalchemy
    - werkzeug
    - bitcoin
    - ecdsa
    - gunicorn
    - itsdangerous
    - psycopg2
    - redis
    - requests
    - virtualenv
    - wsgiref
    - pytest
    - flask-scss

  run:
    - python
    - flask
    - flask-sqlalchemy
    - markupsafe
    - sqlalchemy
    - werkzeug
    - bitcoin
    - ecdsa
    - gunicorn
    - itsdangerous
    - psycopg2
    - redis
    - requests
    - virtualenv
    - wsgiref
    - pytest
    - flask-scss

test:
  # Python imports
  imports:
    - assemblycoins

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://coins.assembly.com
  license: MIT
  summary: 'Digital Tokens on the Bitcoin Blockchain'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
