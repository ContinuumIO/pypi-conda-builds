package:
  name: dockerfly
  version: "1.1.0"

source:
  fn: dockerfly-1.1.0.tar.gz
  url: https://pypi.python.org/packages/source/d/dockerfly/dockerfly-1.1.0.tar.gz
  md5: c10c6a252c2901e8342ec4d302fff045
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - dockerfly = dockerfly:main
    #
    # Would create an entry point called dockerfly that calls dockerfly.main()

    - dockerflyctl = dockerfly.bin.dockerflyctl:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - pip >=6.0
    - sh >=1.09
    - docker-py >=1.1.0
    - docopt >=0.6.1
    - flask >=0.10.1
    - python-daemon >=1.5.0
    - flask-restful >=0.3.0
    - requests >=2.5.2

  run:
    - python
    - pip >=6.0
    - sh >=1.09
    - docker-py >=1.1.0
    - docopt >=0.6.1
    - flask >=0.10.1
    - python-daemon >=1.5.0
    - flask-restful >=0.3.0
    - requests >=2.5.2

test:
  # Python imports
  imports:
    - dockerfly
    - dockerfly.bin
    - dockerfly.dockerlib
    - dockerfly.dockernet
    - dockerfly.dockernet.tests
    - dockerfly.http
    - dockerfly.runtime

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - dockerflyctl --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/memoryboxes/dockerfly
  license: BSD-derived (http://www.repoze.org/LICENSE.txt)
  summary: 'a docker tool for create containers easily'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
