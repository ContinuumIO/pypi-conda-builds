package:
  name: pycontracts
  version: "1.7.2"

source:
  fn: PyContracts-1.7.2.tar.gz
  url: https://pypi.python.org/packages/source/P/PyContracts/PyContracts-1.7.2.tar.gz
  md5: f717c98a82befeb199f0f1e055e4f516
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - pycontracts = pycontracts:main
    #
    # Would create an entry point called pycontracts that calls pycontracts.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - pyparsing
    - decorator

  run:
    - python
    - pyparsing
    - decorator

test:
  # Python imports
  imports:
    - contracts
    - contracts.library
    - contracts.testing
    - contracts.testing.library
    - contracts.useful_contracts
    - pycontracts

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://andreacensi.github.com/contracts/
  license: GNU Library or Lesser General Public License (LGPL)
  summary: 'PyContracts is a Python package that allows to declare constraints on function parameters and return values. Contracts can be specified using Python3 annotations, in a decorator, or inside a docstring :type: and :rtype: tags. PyContracts supports a basic type system, variables binding, arithmetic constraints, and has several specialized contracts (notably for Numpy arrays), as well as an extension API.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
