package:
  name: hexagonit.portletroles
  version: "1.0"

source:
  fn: hexagonit.portletroles-1.0.zip
  url: https://pypi.python.org/packages/source/h/hexagonit.portletroles/hexagonit.portletroles-1.0.zip
  md5: 1f0d92dec0d5f377d45b75e1d0354631
#  patches:
   # List any patch files here
   # - fix.patch

build:
  preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - hexagonit.portletroles = hexagonit.portletroles:main
    #
    # Would create an entry point called hexagonit.portletroles that calls hexagonit.portletroles.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - hexagonit.testing
    - plone.app.portlets
    - plone.browserlayer
    - setuptools
    - z3c.autoinclude

  run:
    - python
    - setuptools
    - hexagonit.testing
    - plone.app.portlets
    - plone.browserlayer
    - setuptools
    - z3c.autoinclude

test:
  # Python imports
  imports:
    - hexagonit
    - hexagonit.portletroles
    - hexagonit.portletroles.browser
    - hexagonit.portletroles.tests
    - hexagonit.portletroles.tests.rolemap

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://www.hexagonit.fi
  license: BSD
  summary: 'Provides roles for adding each portlets.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
