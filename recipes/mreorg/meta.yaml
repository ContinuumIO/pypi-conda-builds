package:
  name: mreorg
  version: "0.2.0"

source:
  fn: mreorg-0.2.0.tar.gz
  url: https://pypi.python.org/packages/source/m/mreorg/mreorg-0.2.0.tar.gz
  md5: 74c42ffc5b29dc0132668dace597815b
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - mreorg = mreorg:main
    #
    # Would create an entry point called mreorg that calls mreorg.main()

    - mreorg.curate = mreorg.curator.cmdline.mreorg_curate:main [curator,mpl]

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - matplotlib
    - configobj
    - django
    - pygments
    - django-dajaxice
    - mhutils

  run:
    - python
    - matplotlib
    - configobj
    - django
    - pygments
    - django-dajaxice
    - mhutils

test:
  # Python imports
  imports:
    - mreorg
    - mreorg.curator
    - mreorg.curator.backend
    - mreorg.curator.cmdline
    - mreorg.curator.frontend
    - mreorg.curator.frontend.templates
    - mreorg.requiredpreimport
    - mreorg.scriptplots

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - mreorg.curate --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/mikehulluk/mreorg
  license: BSD License
  summary: 'Tools for organising and simplifying scripts for modelling'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
