package:
  name: docker-compose
  version: "1.2.0"

source:
  fn: docker-compose-1.2.0.tar.gz
  url: https://pypi.python.org/packages/source/d/docker-compose/docker-compose-1.2.0.tar.gz
  md5: 00bcfff7709e2701de9feb3fedffac34
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - docker-compose = docker-compose:main
    #
    # Would create an entry point called docker-compose that calls docker-compose.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - docopt >=0.6.1,<0.7
    - pyyaml >=3.10,<4
    - requests >=2.2.1,<2.6
    - texttable >=0.8.1,<0.9
    - websocket-client >=0.11.0,<1.0
    - docker-py >=1.0.0,<1.2
    - dockerpty >=0.3.2,<0.4
    - six >=1.3.0,<2

  run:
    - python
    - docopt >=0.6.1,<0.7
    - pyyaml >=3.10,<4
    - requests >=2.2.1,<2.6
    - texttable >=0.8.1,<0.9
    - websocket-client >=0.11.0,<1.0
    - docker-py >=1.0.0,<1.2
    - dockerpty >=0.3.2,<0.4
    - six >=1.3.0,<2

test:
  # Python imports
  imports:
    - compose
    - compose.cli

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://www.docker.com/
  license: Apache License 2.0
  summary: u'Multi-container orchestration for Docker'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
