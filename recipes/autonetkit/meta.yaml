package:
  name: autonetkit
  version: "0.11.2"

source:
  fn: autonetkit-0.11.2.tar.gz
  url: https://pypi.python.org/packages/source/a/autonetkit/autonetkit-0.11.2.tar.gz
  md5: cde99368f5b92a2a7b1bce15a1889d20
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - autonetkit = autonetkit:main
    #
    # Would create an entry point called autonetkit that calls autonetkit.main()

    - autonetkit = autonetkit.console_script:console_entry
    - ank_webserver = autonetkit.webserver:main
    - ank_collect_server = autonetkit.collection.server:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - netaddr ==0.7.10
    - mako ==0.8
    - networkx ==1.7
    - configobj ==4.7.1
    - tornado >=3.0.1

  run:
    - python
    - netaddr ==0.7.10
    - mako ==0.8
    - networkx ==1.7
    - configobj ==4.7.1
    - tornado >=3.0.1

test:
  # Python imports
  imports:
    - autonetkit
    - autonetkit.anm
    - autonetkit.collection
    - autonetkit.compilers
    - autonetkit.compilers.device
    - autonetkit.compilers.platform
    - autonetkit.deploy
    - autonetkit.design
    - autonetkit.design.ip_addressing
    - autonetkit.load
    - autonetkit.nidb
    - autonetkit.plugins
    - autonetkit.topologies

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - autonetkit --help
    - ank_webserver --help
    - ank_collect_server --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://www.autonetkit.org
  license: BSD License
  summary: 'Automatic configuration generation for emulated networks'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
