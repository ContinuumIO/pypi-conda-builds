package:
  name: asv_files
  version: "dev-20121101-01"

source:
  fn: asv_files-dev-20121101-01.tar.gz
  url: https://pypi.python.org/packages/source/a/asv_files/asv_files-dev-20121101-01.tar.gz
  md5: 15dca8e1378b522f6980fbdd1c3f7319
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - asv_files = asv_files:main
    #
    # Would create an entry point called asv_files that calls asv_files.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - asv_utils >=dev-20121101-01
    - asv_media >=dev-20121101-01

  run:
    - python
    - asv_utils >=dev-20121101-01
    - asv_media >=dev-20121101-01

test:
  # Python imports
  imports:
    - asv_files
    - asv_files.common
    - asv_files.dj
    - asv_files.dj.management
    - asv_files.dj.management.commands
    - asv_files.dj.templatetags
    - asv_files.flask
    - asv_files.gae

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://bitbucket.org/xenolog/asv_files/wiki/Home
  license: GPL
  summary: 'Module for:\n* Connecting files to articles and other django models through ContentTypes.\n* Ajax multi-upload FormField and custom ModelField\n'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
