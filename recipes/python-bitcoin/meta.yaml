package:
  name: python-bitcoin
  version: "0.0.10"

source:
  fn: python-bitcoin-0.0.10.tar.gz
  url: https://pypi.python.org/packages/source/p/python-bitcoin/python-bitcoin-0.0.10.tar.gz
  md5: bffd8aaa6123fa2082845e18bcf1df39
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - python-bitcoin = python-bitcoin:main
    #
    # Would create an entry point called python-bitcoin that calls python-bitcoin.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - bigfloat >=0.3.0a2
    - bitstring >=3.1.2
    - blist >=1.3.4
    - cdecimal >=2.3
    - ecdsa >=0.8
    - gmpy2 >=2.0.0
    - isodate >=0.4.8
    - lookahead >=1.0
    - recordtype >=1.1
    - requests >=0.14.0
    - simplejson >=2.6.2
    - six >=1.3.0

  run:
    - python
    - bigfloat >=0.3.0a2
    - bitstring >=3.1.2
    - blist >=1.3.4
    - cdecimal >=2.3
    - ecdsa >=0.8
    - gmpy2 >=2.0.0
    - isodate >=0.4.8
    - lookahead >=1.0
    - recordtype >=1.1
    - requests >=0.14.0
    - simplejson >=2.6.2
    - six >=1.3.0

test:
  # Python imports
  imports:
    - bitcoin

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://www.github.com/monetizeio/python-bitcoin/
  license: MIT License
  summary: u'A collection of serialization and utility methods needed to implement the bitcoin protocol.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
