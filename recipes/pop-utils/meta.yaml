package:
  name: pop-utils
  version: "0.1"

source:
  fn: pop-utils-0.1.tar.gz
  url: https://pypi.python.org/packages/source/p/pop-utils/pop-utils-0.1.tar.gz
  md5: 4e0e4b6df98ca15f16b59395c83930b9
#  patches:
   # List any patch files here
   # - fix.patch

build:
  preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - pop-utils = pop-utils:main
    #
    # Would create an entry point called pop-utils that calls pop-utils.main()

    - pop-cloud-setup=poputils.bin.setup:main
    - pop-cloud-master=poputils.bin.master:main
    - pop-cloud-destroy=poputils.bin.destroy:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - lxml ==2.3
    - argparse ==1.2.1
    - boto ==2.0b4
    - fabric ==1.0.1

  run:
    - python
    - setuptools
    - lxml ==2.3
    - argparse ==1.2.1
    - boto ==2.0b4
    - fabric ==1.0.1

test:
  # Python imports
  imports:
    - poputils
    - poputils.bin
    - poputils.boto
    - poputils.fabfiles
    - poputils.utils

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - pop-cloud-setup --help
    - pop-cloud-master --help
    - pop-cloud-destroy --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/GaretJax/pop-utils
  license: MIT License
  summary: 'Collection of utilities to optimize the deployment and management of a POP-C++ or POP-Java based setup with a special focus on cloud deployments and Amazon Web Services.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
