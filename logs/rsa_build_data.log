Removing old build directory
Removing old work directory
BUILD START: rsa-3.1.4-py_0
Fetching package metadata: ......
Solving package specifications: .+ /home/ubuntu/miniconda/envs/_build/bin/python setup.py install
running install
running bdist_egg
running egg_info
writing requirements to rsa.egg-info/requires.txt
writing rsa.egg-info/PKG-INFO
writing top-level names to rsa.egg-info/top_level.txt
writing dependency_links to rsa.egg-info/dependency_links.txt
writing entry points to rsa.egg-info/entry_points.txt
reading manifest file 'rsa.egg-info/SOURCES.txt'
reading manifest template 'MANIFEST.in'
warning: no files found matching 'README'
writing manifest file 'rsa.egg-info/SOURCES.txt'
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
creating build
creating build/lib
creating build/lib/rsa
copying rsa/_version200.py -> build/lib/rsa
copying rsa/prime.py -> build/lib/rsa
copying rsa/key.py -> build/lib/rsa
copying rsa/_version133.py -> build/lib/rsa
copying rsa/cli.py -> build/lib/rsa
copying rsa/varblock.py -> build/lib/rsa
copying rsa/randnum.py -> build/lib/rsa
copying rsa/pkcs1.py -> build/lib/rsa
copying rsa/util.py -> build/lib/rsa
copying rsa/pem.py -> build/lib/rsa
copying rsa/parallel.py -> build/lib/rsa
copying rsa/__init__.py -> build/lib/rsa
copying rsa/asn1.py -> build/lib/rsa
copying rsa/transform.py -> build/lib/rsa
copying rsa/common.py -> build/lib/rsa
copying rsa/_compat.py -> build/lib/rsa
copying rsa/core.py -> build/lib/rsa
copying rsa/bigfile.py -> build/lib/rsa
creating build/bdist.linux-x86_64
creating build/bdist.linux-x86_64/egg
creating build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/_version200.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/prime.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/key.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/_version133.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/cli.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/varblock.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/randnum.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/pkcs1.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/util.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/pem.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/parallel.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/__init__.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/asn1.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/transform.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/common.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/_compat.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/core.py -> build/bdist.linux-x86_64/egg/rsa
copying build/lib/rsa/bigfile.py -> build/bdist.linux-x86_64/egg/rsa
byte-compiling build/bdist.linux-x86_64/egg/rsa/_version200.py to _version200.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/prime.py to prime.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/key.py to key.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/_version133.py to _version133.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/cli.py to cli.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/varblock.py to varblock.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/randnum.py to randnum.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/pkcs1.py to pkcs1.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/util.py to util.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/pem.py to pem.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/parallel.py to parallel.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/__init__.py to __init__.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/asn1.py to asn1.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/transform.py to transform.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/common.py to common.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/_compat.py to _compat.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/core.py to core.pyc
byte-compiling build/bdist.linux-x86_64/egg/rsa/bigfile.py to bigfile.pyc
creating build/bdist.linux-x86_64/egg/EGG-INFO
copying rsa.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
copying rsa.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying rsa.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying rsa.egg-info/entry_points.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying rsa.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying rsa.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
zip_safe flag not set; analyzing archive contents...
creating dist
creating 'dist/rsa-3.1.4-py2.7.egg' and adding 'build/bdist.linux-x86_64/egg' to it
removing 'build/bdist.linux-x86_64/egg' (and everything under it)
Processing rsa-3.1.4-py2.7.egg
Copying rsa-3.1.4-py2.7.egg to /home/ubuntu/miniconda/envs/_build/lib/python2.7/site-packages
Adding rsa 3.1.4 to easy-install.pth file
Installing pyrsa-encrypt-bigfile script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-encrypt script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-verify script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-sign script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-priv2pub script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-decrypt script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-decrypt-bigfile script to /home/ubuntu/miniconda/envs/_build/bin
Installing pyrsa-keygen script to /home/ubuntu/miniconda/envs/_build/bin

Installed /home/ubuntu/miniconda/envs/_build/lib/python2.7/site-packages/rsa-3.1.4-py2.7.egg
Processing dependencies for rsa==3.1.4
Searching for pyasn1==0.1.7
Best match: pyasn1 0.1.7
Processing pyasn1-0.1.7-py2.7.egg
Adding pyasn1 0.1.7 to easy-install.pth file

Using /home/ubuntu/miniconda/envs/_build/lib/python2.7/site-packages/pyasn1-0.1.7-py2.7.egg
Finished processing dependencies for rsa==3.1.4

The following NEW packages will be INSTALLED:

    openssl:    1.0.1k-1    
    pip:        7.0.3-py27_0
    pyasn1:     0.1.7-py27_0
    python:     2.7.10-0    
    readline:   6.2-2       
    setuptools: 17.0-py27_0 
    sqlite:     3.8.4.1-1   
    system:     5.8-2       
    tk:         8.5.18-0    
    zlib:       1.2.8-0     

Linking packages ...
[                    ]|                                                  |   0%[openssl             ]|                                                  |   0%[readline            ]|#####                                             |  10%[sqlite              ]|##########                                        |  20%[system              ]|###############                                   |  30%[tk                  ]|####################                              |  40%[zlib                ]|#########################                         |  50%[pyasn1              ]|##############################                    |  60%[python              ]|###################################               |  70%[setuptools          ]|########################################          |  80%[pip                 ]|#############################################     |  90%[      COMPLETE      ]|##################################################| 100%
Removing old work directory
Source cache directory is: /home/ubuntu/miniconda/conda-bld/src_cache
Found source in cache: rsa-3.1.4.tar.gz
Extracting download
Package: rsa-3.1.4-py_0
source tree in: /home/ubuntu/miniconda/conda-bld/work/rsa-3.1.4
found egg: /home/ubuntu/miniconda/envs/_build/lib/python2.7/site-packages/rsa-3.1.4-py2.7.egg
number of files: 10
Fixing permissions
Fixing permissions
BUILD END: rsa-3.1.4-py_0
TEST START: rsa-3.1.4-py_0
Fetching package metadata: ......
Solving package specifications: .===== testing package: rsa-3.1.4-py_0 =====
import: u'rsa'
===== rsa-3.1.4-py_0 OK =====
+ pyrsa-priv2pub --help
Usage: pyrsa-priv2pub [options]

Reads a private key and outputs the corresponding public key. Both private and
public keys use the format described in PKCS#1 v1.5

Options:
  -h, --help            show this help message and exit
  -i INFILENAME, --input=INFILENAME
                        Input filename. Reads from stdin if not specified
  -o OUTFILENAME, --output=OUTFILENAME
                        Output filename. Writes to stdout of not specified
  --inform=INFORM       key format of input - default PEM
  --outform=OUTFORM     key format of output - default PEM
+ pyrsa-keygen --help
Usage: pyrsa-keygen [options] keysize

Generates a new RSA keypair of "keysize" bits.

Options:
  -h, --help         show this help message and exit
  --pubout=PUBOUT    Output filename for the public key. The public key is not
                     saved if this option is not present. You can use pyrsa-
                     priv2pub to create the public key file later.
  -o OUT, --out=OUT  Output filename for the private key. The key is written
                     to stdout if this option is not present.
  --form=FORM        key format of the private and public keys - default PEM
+ pyrsa-encrypt --help
Usage: pyrsa-encrypt [options] public_key

Encrypts a file. The file must be shorter than the key length in order to be
encrypted. For larger files, use the pyrsa-encrypt-bigfile command.

Options:
  -h, --help            show this help message and exit
  -i INPUT, --input=INPUT
                        Name of the file to encrypt. Reads from stdin if not
                        specified.
  -o OUTPUT, --output=OUTPUT
                        Name of the file to write the encrypted file to.
                        Written to stdout if this option is not present.
  --keyform=KEYFORM     Key format of the public key - default PEM
+ pyrsa-decrypt --help
Usage: pyrsa-decrypt [options] private_key

Decrypts a file. The original file must be shorter than the key length in
order to have been encrypted. For larger files, use the pyrsa-decrypt-bigfile
command.

Options:
  -h, --help            show this help message and exit
  -i INPUT, --input=INPUT
                        Name of the file to decrypt. Reads from stdin if not
                        specified.
  -o OUTPUT, --output=OUTPUT
                        Name of the file to write the decrypted file to.
                        Written to stdout if this option is not present.
  --keyform=KEYFORM     Key format of the private key - default PEM
+ pyrsa-sign --help
Usage: pyrsa-sign [options] private_key hash_method

Signs a file, outputs the signature. Choose the hash method from MD5, SHA-1,
SHA-256, SHA-384, SHA-512

Options:
  -h, --help            show this help message and exit
  -i INPUT, --input=INPUT
                        Name of the file to sign. Reads from stdin if not
                        specified.
  -o OUTPUT, --output=OUTPUT
                        Name of the file to write the signature to. Written to
                        stdout if this option is not present.
  --keyform=KEYFORM     Key format of the private key - default PEM
+ pyrsa-verify --help
Usage: pyrsa-verify [options] public_key signature_file

Verifies a signature, exits with status 0 upon success, prints an error
message and exits with status 1 upon error.

Options:
  -h, --help            show this help message and exit
  -i INPUT, --input=INPUT
                        Name of the file to verify. Reads from stdin if not
                        specified.
  --keyform=KEYFORM     Key format of the public key - default PEM
+ pyrsa-encrypt-bigfile --help
Usage: pyrsa-encrypt-bigfile [options] public_key

Encrypts a file to an encrypted VARBLOCK file. The file can be larger than the
key length, but the output file is only compatible with Python-RSA.

Options:
  -h, --help            show this help message and exit
  -i INPUT, --input=INPUT
                        Name of the file to encrypt. Reads from stdin if not
                        specified.
  -o OUTPUT, --output=OUTPUT
                        Name of the file to write the encrypted file to.
                        Written to stdout if this option is not present.
  --keyform=KEYFORM     Key format of the public key - default PEM
+ pyrsa-decrypt-bigfile --help
Usage: pyrsa-decrypt-bigfile [options] private_key

Decrypts an encrypted VARBLOCK file that was encrypted with pyrsa-encrypt-
bigfile

Options:
  -h, --help            show this help message and exit
  -i INPUT, --input=INPUT
                        Name of the file to decrypt. Reads from stdin if not
                        specified.
  -o OUTPUT, --output=OUTPUT
                        Name of the file to write the decrypted file to.
                        Written to stdout if this option is not present.
  --keyform=KEYFORM     Key format of the private key - default PEM

The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    rsa-3.1.4                  |             py_0         169 KB

The following NEW packages will be INSTALLED:

    openssl:    1.0.1k-1    
    pip:        7.0.3-py27_0
    pyasn1:     0.1.7-py27_0
    python:     2.7.10-0    
    readline:   6.2-2       
    rsa:        3.1.4-py_0  
    setuptools: 17.0-py27_0 
    sqlite:     3.8.4.1-1   
    system:     5.8-2       
    tk:         8.5.18-0    
    zlib:       1.2.8-0     

Fetching packages ...
rsa-3.1.4-py_0   0% |                              | ETA:  --:--:--   0.00  B/srsa-3.1.4-py_0   9% |##                             | ETA:  0:00:00  46.43 MB/srsa-3.1.4-py_0  18% |#####                          | ETA:  0:00:00  58.41 MB/srsa-3.1.4-py_0  28% |########                       | ETA:  0:00:00  63.26 MB/srsa-3.1.4-py_0  37% |###########                    | ETA:  0:00:00  67.16 MB/srsa-3.1.4-py_0  47% |##############                 | ETA:  0:00:00   8.81 MB/srsa-3.1.4-py_0  56% |#################              | ETA:  0:00:00  10.36 MB/srsa-3.1.4-py_0  66% |####################           | ETA:  0:00:00  11.85 MB/srsa-3.1.4-py_0  75% |#######################        | ETA:  0:00:00  13.30 MB/srsa-3.1.4-py_0  85% |##########################     | ETA:  0:00:00  14.69 MB/srsa-3.1.4-py_0  94% |#############################  | ETA:  0:00:00  16.03 MB/srsa-3.1.4-py_0 100% |###############################| ETA:  0:00:00  16.64 MB/srsa-3.1.4-py_0 100% |###############################| Time: 0:00:00  16.27 MB/s
Extracting packages ...
[      COMPLETE      ]|                                                  |   0%[rsa                 ]|                                                  |   0%[rsa                 ]|                                                  |   0%[      COMPLETE      ]|##################################################| 100%
Linking packages ...
[      COMPLETE      ]|                                                  |   0%[openssl             ]|                                                  |   0%[openssl             ]|                                                  |   0%[readline            ]|####                                              |   9%[sqlite              ]|#########                                         |  18%[system              ]|#############                                     |  27%[tk                  ]|##################                                |  36%[zlib                ]|######################                            |  45%[pyasn1              ]|###########################                       |  54%[python              ]|###############################                   |  63%[rsa                 ]|####################################              |  72%[setuptools          ]|########################################          |  81%[pip                 ]|#############################################     |  90%[      COMPLETE      ]|##################################################| 100%
TEST END: rsa-3.1.4-py_0
# If you want to upload this package to binstar.org later, type:
#
# $ binstar upload /home/ubuntu/miniconda/conda-bld/noarch/rsa-3.1.4-py_0.tar.bz2
#
# To have conda build upload to binstar automatically, use
# $ conda config --set binstar_upload yes

